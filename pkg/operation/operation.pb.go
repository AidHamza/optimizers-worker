// Code generated by protoc-gen-go. DO NOT EDIT.
// source: operation.proto

/*
Package operation is a generated protocol buffer package.

It is generated from these files:
	operation.proto

It has these top-level messages:
	Operation
	Result
*/
package operation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// FileType detected from API
type Operation_FileType int32

const (
	Operation_JPEG Operation_FileType = 0
	Operation_PNG  Operation_FileType = 1
)

var Operation_FileType_name = map[int32]string{
	0: "JPEG",
	1: "PNG",
}
var Operation_FileType_value = map[string]int32{
	"JPEG": 0,
	"PNG":  1,
}

func (x Operation_FileType) String() string {
	return proto.EnumName(Operation_FileType_name, int32(x))
}
func (Operation_FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Status of the operation
type Result_Status int32

const (
	Result_SUCCESS Result_Status = 0
	Result_FAILED  Result_Status = 1
)

var Result_Status_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILED",
}
var Result_Status_value = map[string]int32{
	"SUCCESS": 0,
	"FAILED":  1,
}

func (x Result_Status) String() string {
	return proto.EnumName(Result_Status_name, int32(x))
}
func (Result_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

//
// This Operation message descrie the operations to be done
// on file and bellow the example how to exploit it
//
// operation := &op.Operation{}
// operation.Id = 12
// operation.File = "hello.jpeg"
// operation.Type = op.Operation_JPEG
//
// out, err := proto.Marshal(operation)
// if err != nil {
// log.Fatalln("Failed to encode address book:", err)
// }
//
// fmt.Printf("ProtoBuf Example : %+v", out)
type Operation struct {
	Id      uint64               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	File    string               `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	Type    Operation_FileType   `protobuf:"varint,3,opt,name=type,enum=operation.Operation_FileType" json:"type,omitempty"`
	Command []*Operation_Command `protobuf:"bytes,4,rep,name=command" json:"command,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Operation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Operation) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *Operation) GetType() Operation_FileType {
	if m != nil {
		return m.Type
	}
	return Operation_JPEG
}

func (m *Operation) GetCommand() []*Operation_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

// Command to perform on the file
type Operation_Command struct {
	Command string   `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Flags   []string `protobuf:"bytes,2,rep,name=flags" json:"flags,omitempty"`
}

func (m *Operation_Command) Reset()                    { *m = Operation_Command{} }
func (m *Operation_Command) String() string            { return proto.CompactTextString(m) }
func (*Operation_Command) ProtoMessage()               {}
func (*Operation_Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Operation_Command) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Operation_Command) GetFlags() []string {
	if m != nil {
		return m.Flags
	}
	return nil
}

type Result struct {
	Id     uint64        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	File   string        `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	Status Result_Status `protobuf:"varint,3,opt,name=status,enum=operation.Result_Status" json:"status,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Result) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *Result) GetStatus() Result_Status {
	if m != nil {
		return m.Status
	}
	return Result_SUCCESS
}

func init() {
	proto.RegisterType((*Operation)(nil), "operation.Operation")
	proto.RegisterType((*Operation_Command)(nil), "operation.Operation.Command")
	proto.RegisterType((*Result)(nil), "operation.Result")
	proto.RegisterEnum("operation.Operation_FileType", Operation_FileType_name, Operation_FileType_value)
	proto.RegisterEnum("operation.Result_Status", Result_Status_name, Result_Status_value)
}

func init() { proto.RegisterFile("operation.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0x97, 0xb6, 0xb6, 0xeb, 0x7f, 0x30, 0xcb, 0x1f, 0x0f, 0x41, 0x1c, 0xc4, 0x9e, 0x72,
	0x2a, 0x3a, 0x41, 0xf0, 0x28, 0xb5, 0x1b, 0x8a, 0xe8, 0x48, 0xf5, 0x03, 0x54, 0x9b, 0x49, 0xa0,
	0x5b, 0xca, 0x9a, 0x1d, 0x76, 0xf4, 0x3b, 0xfb, 0x01, 0x84, 0xb4, 0xdd, 0x3c, 0x78, 0xd8, 0x2d,
	0xef, 0xe5, 0xe5, 0xc7, 0x7b, 0x04, 0x4e, 0x75, 0x2d, 0x37, 0x85, 0x51, 0x7a, 0x9d, 0xd4, 0x1b,
	0x6d, 0x34, 0x86, 0x7b, 0x23, 0xfe, 0x21, 0x10, 0xbe, 0xf6, 0x0a, 0xc7, 0xe0, 0xa8, 0x92, 0x12,
	0x46, 0xb8, 0x27, 0x1c, 0x55, 0x22, 0x82, 0xb7, 0x54, 0x95, 0xa4, 0x0e, 0x23, 0x3c, 0x14, 0xf6,
	0x8c, 0xd7, 0xe0, 0x99, 0x5d, 0x2d, 0xa9, 0xcb, 0x08, 0x1f, 0x4f, 0x27, 0xc9, 0x01, 0xbe, 0xe7,
	0x24, 0x33, 0x55, 0xc9, 0xb7, 0x5d, 0x2d, 0x85, 0x8d, 0xe2, 0x2d, 0x04, 0x9f, 0x7a, 0xb5, 0x2a,
	0xd6, 0x25, 0xf5, 0x98, 0xcb, 0x47, 0xd3, 0x8b, 0x7f, 0x5f, 0xa5, 0x6d, 0x46, 0xf4, 0xe1, 0xf3,
	0x3b, 0x08, 0x3a, 0x0f, 0xe9, 0x01, 0x41, 0x6c, 0x99, 0x5e, 0xe2, 0x19, 0x9c, 0x2c, 0xab, 0xe2,
	0xab, 0xa1, 0x0e, 0x73, 0x79, 0x28, 0x5a, 0x11, 0x4f, 0x60, 0xd8, 0x97, 0xc0, 0x21, 0x78, 0x4f,
	0x8b, 0x6c, 0x1e, 0x0d, 0x30, 0x00, 0x77, 0xf1, 0x32, 0x8f, 0x48, 0xfc, 0x4d, 0xc0, 0x17, 0xb2,
	0xd9, 0x56, 0xe6, 0xa8, 0xcd, 0x57, 0xe0, 0x37, 0xa6, 0x30, 0xdb, 0xa6, 0x5b, 0x4d, 0xff, 0xf4,
	0x6f, 0x31, 0x49, 0x6e, 0xef, 0x45, 0x97, 0x8b, 0x2f, 0xc1, 0x6f, 0x1d, 0x1c, 0x41, 0x90, 0xbf,
	0xa7, 0x69, 0x96, 0xe7, 0xd1, 0x00, 0x01, 0xfc, 0xd9, 0xfd, 0xe3, 0x73, 0xf6, 0x10, 0x91, 0x0f,
	0xdf, 0x7e, 0xc6, 0xcd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x49, 0x7c, 0x6e, 0x9f, 0x01,
	0x00, 0x00,
}
